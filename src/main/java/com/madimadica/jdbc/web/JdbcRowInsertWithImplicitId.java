package com.madimadica.jdbc.web;

import com.madimadica.jdbc.api.RowInsert;
import com.madimadica.jdbc.api.RowInsertBuilderStepsWithImplicitId;
import com.madimadica.jdbc.api.RowInsertBuilderWithImplicitId;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.PreparedStatement;
import java.sql.Statement;

/**
 * For use with JDBC implementations that can implicitly extract generated row IDs for single-row inserts.
 */
public non-sealed interface JdbcRowInsertWithImplicitId extends JdbcRowInsertWithId {

    /**
     * Begin a sequence of fluent API operations to define a single
     * row INSERT INTO query. Terminated (and executed) by a call to insert,
     * with or without a returning a generated value.
     * @param tableName Name of the table to update
     * @return fluent API builder to finish defining the insert.
     */
    default RowInsertBuilderStepsWithImplicitId.RequiredValue insertInto(String tableName) {
        getLogger().trace("Using [insertInto] API");
        return new RowInsertBuilderWithImplicitId(this, tableName);
    }

    /**
     * INSERT a single row using the given {@link RowInsert} parameter object.
     * Returns a generated Number value.
     * @param rowInsert configured row insert parameter
     * @return an autogenerated {@link Number} value, nullable.
     */
    default Number insertReturningNumber(RowInsert rowInsert) {
        String sql = InternalUtils.generateInsertSql(this, rowInsert);
        getLogger().debug(sql);
        KeyHolder keyHolder = new GeneratedKeyHolder();
        int rowsAffected = getJdbcTemplate().update(connection -> {
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            int paramIndex = 1;
            for (Object value : rowInsert.escapedValues().values()) {
                ps.setObject(paramIndex++, value);
            }
            return ps;
        }, keyHolder);
        return keyHolder.getKey();
    }
}
